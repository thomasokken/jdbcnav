PostgreSQL INTERVAL type support

Banish database-dependent date/time/timestamp/timestamp_tz/interval types from
the ResultSetTableModel. There should be jdbcnav-specific types for these, with
the responsibility of converting them to/from db-specific types moved to
the JDBCDriver subclasses, and the responsibility of converting them to
db-specific SQL expressions moved to the ScriptGenerator subclasses.
For other database-dependent types, the current generic mechanisms should stay
in place; at least they provide a reasonable fallback, in case we encounter
unexpected types (as long as they have a reasonable toString() method, plus
a String-consuming constructor that is the inverse of toString()).

Oracle TIMESTAMPLTZ values act weird. It seems like the timestampValue() method
and the Timestamp-consuming constructor are not each other's inverses. Whenever
I call TIMESTAMPLTZ.timestampValue(), I seem to be getting a value that is 8
hours off. Very strange -- I am in the CET (UTC+0100) time zone, so where does
an 8 hour discrepancy come from? Does Oracle think I'm in Montana or Japan?

When opening multiple table editing windows at the same time, and one or more
of them are for tables containing Oracle LONG or LONG RAW columns, the
exception "Stream has already been closed" may occur, or the application may
freeze completely. To avoid this, you must always open tables containing LONG
or LONG RAW columns separately. It would be nice if JDBC Navigator would load
such tables separately automagically; this will require (1) a new Table
property mustBeLoadedSeparately, plus (2) code in BasicDatabase and
JDBCDatabase to load such tables serially (the easiest approach would be to
load them first, before opening all the remaining windows; this will require
a mechanism whereby the Database can keep track of whether any loads are still
in progress). Of course this also affects other tables that might be opened
while a background load of a LONG-containing table is in progress; the solution
will probably have to be something along the lines of a queue.

"Set Password" should make the user type the password twice if it doesn't match
any of the existing ones (i.e., if it does not successfully decrypt any
encypted connection configs) -- because that means it's a new password, and
there's otherwise the danger that the user could accidentally encrypt all his
connection configs using a mistyped password.

Loading large queries can cause OutOfMemoryError. These should be caught and a
message displayed to the user. (Currently, all that happens is a message being
printed on standard error by the JVM, where most users will never see it; this
means that the user can't tell the difference between an operation that failed
because it ran out of memory and an operation that is simply taking very long.)
Apart from better user feedback, another reason for catching this error is to
prevent the AWT event thread from dying.

Hourglass cursor for slow operations that block the UI. Maybe also use Windows-
style "hourglass+arrow" cursor for QueryResultFrame while query is in progess.

Support for additional database products (Transbase, DB2, MySQL).
