Work in progress:

ForeignKeySelector, or rather, the TableFrame code that uses it, is still full
of bugs:

1) Selecting a value doesn't seem to actually populate the table. What's wrong?
   Is ResultSetTableModel.setValueAt() even getting called?
2) On subsequent invocations of the "Select FK Value" command, when the
   selection is actually made in the ForeignKeySelector (whether through
   clicking "Select" or double-clicking the row, regardless), an NPE is thrown
   at TableFrame.java:273. Something not working in the key column remapping.
3) The columns in the ForeignKeySelector should be in the same order as on the
   TableFrame, even taking the Model/View mapping into account. Since I already
   have to massage the Data object in order to put in the right column headers,
   this sounds like a good reason to create a wrapper around the Data object;
   this eliminates all the copying, and can deal with the column headers by
   overriding getColumnName(), and deal with column reshuffling by massaging
   column indexes before forwarding to the underlying Data object's
   getValueAt() method.

-------------------------------------------------------------------------------
Maximized windows behaving badly? This may be specific to the Windows look and
feel. Check, and investigate possibility of work-around.

Change window placement code so that windows are always entirely on-screen. The
current behavior is annoying when opening large tables, since such windows are
typically the size of the entire screen, so you always have to move (or zoom)
them before you can use them.

Oracle INTERVAL type support

Hourglass cursor for windows where long queries are in progress? Use
hourglass+arrow or hourglass+I-beam cursors, like the ones Windows uses to
indicate a slow operation is in progress AND the UI is still active.

MySQL support
