ScriptGenerator.limitLineLength() needs to handle PostgreSQL escape sequences
-- these are generated for binary literals (e.g. bytea). They look like \\nnn;
there should never be a line break within those 5 chars. Also: when I'm
generating SQL for PostgreSQL, I guess this means I need to quote backslash
characters.

INTERVAL support: implement kludges to map PostgreSQL's INTERVAL YEAR TO SECOND
semantics onto SQL-style INTERVAL DAY TO SECOND, so Oracle SQL scripts can be
generated from PostgreSQL tables; also, a mapping from INTERVAL to NUMERIC
would be nice (map INTERVAL YEAR TO MONTH to a number of months; map INTERVAL
DAY TO SECOND to a number of nanoseconds; PostgreSQL's INTERVAL causes problems
here, too -- kludge it by using the approximation 1 month = 30.436875 days).

When opening multiple table editing windows at the same time, and one or more
of them are for tables containing Oracle LONG or LONG RAW columns, the
exception "Stream has already been closed" may occur, or the application may
freeze completely. To avoid this, you must always open tables containing LONG
or LONG RAW columns separately. It would be nice if JDBC Navigator would load
such tables separately automagically; this will require (1) a new Table
property mustBeLoadedSeparately, plus (2) code in BasicDatabase and
JDBCDatabase to load such tables serially (the easiest approach would be to
load them first, before opening all the remaining windows; this will require
a mechanism whereby the Database can keep track of whether any loads are still
in progress). Of course this also affects other tables that might be opened
while a background load of a LONG-containing table is in progress; the solution
will probably have to be something along the lines of a queue.

"Set Password" should make the user type the password twice if it doesn't match
any of the existing ones (i.e., if it does not successfully decrypt any
encypted connection configs) -- because that means it's a new password, and
there's otherwise the danger that the user could accidentally encrypt all his
connection configs using a mistyped password.

Loading large queries can cause OutOfMemoryError. These should be caught and a
message displayed to the user. (Currently, all that happens is a message being
printed on standard error by the JVM, where most users will never see it; this
means that the user can't tell the difference between an operation that failed
because it ran out of memory and an operation that is simply taking very long.)
Apart from better user feedback, another reason for catching this error is to
prevent the AWT event thread from dying.

Hourglass cursor for slow operations that block the UI. Maybe also use Windows-
style "hourglass+arrow" cursor for QueryResultFrame while query is in progess.

Progress dialog for Generate Script.

Support for additional database products (Transbase, DB2, MySQL).

BFILE: it would be nice if we could use Edit Cell to look at the contents of
the referenced file. Note that you cannot save data *to* a BFILE, so there
should be no "Apply to table" option in this case.

Make "Reload Tree", "Clear Cache", and "Remove Orphans" scriptable, so that
you can mix the SQL embedding and the JDBCNav functionality in one script --
this could be useful for testing etc.

Add option to Preferences to suppress the splash screen on startup.
